// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	newrelic "github.com/newrelic/go-agent"
)

type FakeTransaction struct {
	HeaderStub        func() http.Header
	headerMutex       sync.RWMutex
	headerArgsForCall []struct{}
	headerReturns     struct {
		result1 http.Header
	}
	headerReturnsOnCall map[int]struct {
		result1 http.Header
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	WriteHeaderStub        func(statusCode int)
	writeHeaderMutex       sync.RWMutex
	writeHeaderArgsForCall []struct {
		statusCode int
	}
	EndStub        func() error
	endMutex       sync.RWMutex
	endArgsForCall []struct{}
	endReturns     struct {
		result1 error
	}
	endReturnsOnCall map[int]struct {
		result1 error
	}
	IgnoreStub        func() error
	ignoreMutex       sync.RWMutex
	ignoreArgsForCall []struct{}
	ignoreReturns     struct {
		result1 error
	}
	ignoreReturnsOnCall map[int]struct {
		result1 error
	}
	SetNameStub        func(name string) error
	setNameMutex       sync.RWMutex
	setNameArgsForCall []struct {
		name string
	}
	setNameReturns struct {
		result1 error
	}
	setNameReturnsOnCall map[int]struct {
		result1 error
	}
	NoticeErrorStub        func(err error) error
	noticeErrorMutex       sync.RWMutex
	noticeErrorArgsForCall []struct {
		err error
	}
	noticeErrorReturns struct {
		result1 error
	}
	noticeErrorReturnsOnCall map[int]struct {
		result1 error
	}
	AddAttributeStub        func(key string, value interface{}) error
	addAttributeMutex       sync.RWMutex
	addAttributeArgsForCall []struct {
		key   string
		value interface{}
	}
	addAttributeReturns struct {
		result1 error
	}
	addAttributeReturnsOnCall map[int]struct {
		result1 error
	}
	StartSegmentNowStub        func() newrelic.SegmentStartTime
	startSegmentNowMutex       sync.RWMutex
	startSegmentNowArgsForCall []struct{}
	startSegmentNowReturns     struct {
		result1 newrelic.SegmentStartTime
	}
	startSegmentNowReturnsOnCall map[int]struct {
		result1 newrelic.SegmentStartTime
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransaction) Header() http.Header {
	fake.headerMutex.Lock()
	ret, specificReturn := fake.headerReturnsOnCall[len(fake.headerArgsForCall)]
	fake.headerArgsForCall = append(fake.headerArgsForCall, struct{}{})
	fake.recordInvocation("Header", []interface{}{})
	fake.headerMutex.Unlock()
	if fake.HeaderStub != nil {
		return fake.HeaderStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.headerReturns.result1
}

func (fake *FakeTransaction) HeaderCallCount() int {
	fake.headerMutex.RLock()
	defer fake.headerMutex.RUnlock()
	return len(fake.headerArgsForCall)
}

func (fake *FakeTransaction) HeaderReturns(result1 http.Header) {
	fake.HeaderStub = nil
	fake.headerReturns = struct {
		result1 http.Header
	}{result1}
}

func (fake *FakeTransaction) HeaderReturnsOnCall(i int, result1 http.Header) {
	fake.HeaderStub = nil
	if fake.headerReturnsOnCall == nil {
		fake.headerReturnsOnCall = make(map[int]struct {
			result1 http.Header
		})
	}
	fake.headerReturnsOnCall[i] = struct {
		result1 http.Header
	}{result1}
}

func (fake *FakeTransaction) Write(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Write", []interface{}{arg1Copy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.writeReturns.result1, fake.writeReturns.result2
}

func (fake *FakeTransaction) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeTransaction) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].arg1
}

func (fake *FakeTransaction) WriteReturns(result1 int, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTransaction) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTransaction) WriteHeader(statusCode int) {
	fake.writeHeaderMutex.Lock()
	fake.writeHeaderArgsForCall = append(fake.writeHeaderArgsForCall, struct {
		statusCode int
	}{statusCode})
	fake.recordInvocation("WriteHeader", []interface{}{statusCode})
	fake.writeHeaderMutex.Unlock()
	if fake.WriteHeaderStub != nil {
		fake.WriteHeaderStub(statusCode)
	}
}

func (fake *FakeTransaction) WriteHeaderCallCount() int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	return len(fake.writeHeaderArgsForCall)
}

func (fake *FakeTransaction) WriteHeaderArgsForCall(i int) int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	return fake.writeHeaderArgsForCall[i].statusCode
}

func (fake *FakeTransaction) End() error {
	fake.endMutex.Lock()
	ret, specificReturn := fake.endReturnsOnCall[len(fake.endArgsForCall)]
	fake.endArgsForCall = append(fake.endArgsForCall, struct{}{})
	fake.recordInvocation("End", []interface{}{})
	fake.endMutex.Unlock()
	if fake.EndStub != nil {
		return fake.EndStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.endReturns.result1
}

func (fake *FakeTransaction) EndCallCount() int {
	fake.endMutex.RLock()
	defer fake.endMutex.RUnlock()
	return len(fake.endArgsForCall)
}

func (fake *FakeTransaction) EndReturns(result1 error) {
	fake.EndStub = nil
	fake.endReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) EndReturnsOnCall(i int, result1 error) {
	fake.EndStub = nil
	if fake.endReturnsOnCall == nil {
		fake.endReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.endReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) Ignore() error {
	fake.ignoreMutex.Lock()
	ret, specificReturn := fake.ignoreReturnsOnCall[len(fake.ignoreArgsForCall)]
	fake.ignoreArgsForCall = append(fake.ignoreArgsForCall, struct{}{})
	fake.recordInvocation("Ignore", []interface{}{})
	fake.ignoreMutex.Unlock()
	if fake.IgnoreStub != nil {
		return fake.IgnoreStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.ignoreReturns.result1
}

func (fake *FakeTransaction) IgnoreCallCount() int {
	fake.ignoreMutex.RLock()
	defer fake.ignoreMutex.RUnlock()
	return len(fake.ignoreArgsForCall)
}

func (fake *FakeTransaction) IgnoreReturns(result1 error) {
	fake.IgnoreStub = nil
	fake.ignoreReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) IgnoreReturnsOnCall(i int, result1 error) {
	fake.IgnoreStub = nil
	if fake.ignoreReturnsOnCall == nil {
		fake.ignoreReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ignoreReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) SetName(name string) error {
	fake.setNameMutex.Lock()
	ret, specificReturn := fake.setNameReturnsOnCall[len(fake.setNameArgsForCall)]
	fake.setNameArgsForCall = append(fake.setNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("SetName", []interface{}{name})
	fake.setNameMutex.Unlock()
	if fake.SetNameStub != nil {
		return fake.SetNameStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setNameReturns.result1
}

func (fake *FakeTransaction) SetNameCallCount() int {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	return len(fake.setNameArgsForCall)
}

func (fake *FakeTransaction) SetNameArgsForCall(i int) string {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	return fake.setNameArgsForCall[i].name
}

func (fake *FakeTransaction) SetNameReturns(result1 error) {
	fake.SetNameStub = nil
	fake.setNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) SetNameReturnsOnCall(i int, result1 error) {
	fake.SetNameStub = nil
	if fake.setNameReturnsOnCall == nil {
		fake.setNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) NoticeError(err error) error {
	fake.noticeErrorMutex.Lock()
	ret, specificReturn := fake.noticeErrorReturnsOnCall[len(fake.noticeErrorArgsForCall)]
	fake.noticeErrorArgsForCall = append(fake.noticeErrorArgsForCall, struct {
		err error
	}{err})
	fake.recordInvocation("NoticeError", []interface{}{err})
	fake.noticeErrorMutex.Unlock()
	if fake.NoticeErrorStub != nil {
		return fake.NoticeErrorStub(err)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.noticeErrorReturns.result1
}

func (fake *FakeTransaction) NoticeErrorCallCount() int {
	fake.noticeErrorMutex.RLock()
	defer fake.noticeErrorMutex.RUnlock()
	return len(fake.noticeErrorArgsForCall)
}

func (fake *FakeTransaction) NoticeErrorArgsForCall(i int) error {
	fake.noticeErrorMutex.RLock()
	defer fake.noticeErrorMutex.RUnlock()
	return fake.noticeErrorArgsForCall[i].err
}

func (fake *FakeTransaction) NoticeErrorReturns(result1 error) {
	fake.NoticeErrorStub = nil
	fake.noticeErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) NoticeErrorReturnsOnCall(i int, result1 error) {
	fake.NoticeErrorStub = nil
	if fake.noticeErrorReturnsOnCall == nil {
		fake.noticeErrorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.noticeErrorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) AddAttribute(key string, value interface{}) error {
	fake.addAttributeMutex.Lock()
	ret, specificReturn := fake.addAttributeReturnsOnCall[len(fake.addAttributeArgsForCall)]
	fake.addAttributeArgsForCall = append(fake.addAttributeArgsForCall, struct {
		key   string
		value interface{}
	}{key, value})
	fake.recordInvocation("AddAttribute", []interface{}{key, value})
	fake.addAttributeMutex.Unlock()
	if fake.AddAttributeStub != nil {
		return fake.AddAttributeStub(key, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addAttributeReturns.result1
}

func (fake *FakeTransaction) AddAttributeCallCount() int {
	fake.addAttributeMutex.RLock()
	defer fake.addAttributeMutex.RUnlock()
	return len(fake.addAttributeArgsForCall)
}

func (fake *FakeTransaction) AddAttributeArgsForCall(i int) (string, interface{}) {
	fake.addAttributeMutex.RLock()
	defer fake.addAttributeMutex.RUnlock()
	return fake.addAttributeArgsForCall[i].key, fake.addAttributeArgsForCall[i].value
}

func (fake *FakeTransaction) AddAttributeReturns(result1 error) {
	fake.AddAttributeStub = nil
	fake.addAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) AddAttributeReturnsOnCall(i int, result1 error) {
	fake.AddAttributeStub = nil
	if fake.addAttributeReturnsOnCall == nil {
		fake.addAttributeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addAttributeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransaction) StartSegmentNow() newrelic.SegmentStartTime {
	fake.startSegmentNowMutex.Lock()
	ret, specificReturn := fake.startSegmentNowReturnsOnCall[len(fake.startSegmentNowArgsForCall)]
	fake.startSegmentNowArgsForCall = append(fake.startSegmentNowArgsForCall, struct{}{})
	fake.recordInvocation("StartSegmentNow", []interface{}{})
	fake.startSegmentNowMutex.Unlock()
	if fake.StartSegmentNowStub != nil {
		return fake.StartSegmentNowStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.startSegmentNowReturns.result1
}

func (fake *FakeTransaction) StartSegmentNowCallCount() int {
	fake.startSegmentNowMutex.RLock()
	defer fake.startSegmentNowMutex.RUnlock()
	return len(fake.startSegmentNowArgsForCall)
}

func (fake *FakeTransaction) StartSegmentNowReturns(result1 newrelic.SegmentStartTime) {
	fake.StartSegmentNowStub = nil
	fake.startSegmentNowReturns = struct {
		result1 newrelic.SegmentStartTime
	}{result1}
}

func (fake *FakeTransaction) StartSegmentNowReturnsOnCall(i int, result1 newrelic.SegmentStartTime) {
	fake.StartSegmentNowStub = nil
	if fake.startSegmentNowReturnsOnCall == nil {
		fake.startSegmentNowReturnsOnCall = make(map[int]struct {
			result1 newrelic.SegmentStartTime
		})
	}
	fake.startSegmentNowReturnsOnCall[i] = struct {
		result1 newrelic.SegmentStartTime
	}{result1}
}

func (fake *FakeTransaction) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.headerMutex.RLock()
	defer fake.headerMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	fake.endMutex.RLock()
	defer fake.endMutex.RUnlock()
	fake.ignoreMutex.RLock()
	defer fake.ignoreMutex.RUnlock()
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	fake.noticeErrorMutex.RLock()
	defer fake.noticeErrorMutex.RUnlock()
	fake.addAttributeMutex.RLock()
	defer fake.addAttributeMutex.RUnlock()
	fake.startSegmentNowMutex.RLock()
	defer fake.startSegmentNowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransaction) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ newrelic.Transaction = new(FakeTransaction)
