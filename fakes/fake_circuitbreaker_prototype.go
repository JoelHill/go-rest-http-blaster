// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type FakeCircuitBreakerPrototype struct {
	ExecuteStub        func(func() (interface{}, error)) (interface{}, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 func() (interface{}, error)
	}
	executeReturns struct {
		result1 interface{}
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCircuitBreakerPrototype) Execute(arg1 func() (interface{}, error)) (interface{}, error) {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 func() (interface{}, error)
	}{arg1})
	fake.recordInvocation("Execute", []interface{}{arg1})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeReturns.result1, fake.executeReturns.result2
}

func (fake *FakeCircuitBreakerPrototype) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeCircuitBreakerPrototype) ExecuteArgsForCall(i int) func() (interface{}, error) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].arg1
}

func (fake *FakeCircuitBreakerPrototype) ExecuteReturns(result1 interface{}, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCircuitBreakerPrototype) ExecuteReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCircuitBreakerPrototype) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCircuitBreakerPrototype) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
